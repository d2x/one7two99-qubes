Hello,

while some of us don't recommend to run Qubes OS in a Dual Boot setup there are certain use cases, where you "need" to run windows baremetal / outside of Qubes:

In my case:
- using specific applications which require OpenGL
- use of VMware Workstation in order to provision Virtual Machines,
  which will be "exported" to a vSphere Cluster

As such I tried to do everything I can to make the Dual Boot setup as "reasonable secure" as possible:

- Flash BIOS with Coreboot and SeaBIOS as secondary payload
- Encrypt Windows using Bitlocker using TPM and PIN
- using the windows OS selection screen in favor of the grub selection
  as Bitlocker only works when MBR is owned by windows.
  If not, you need to enter the Bitlocker recovery key on each startup

The problem is, that an attacker could attack the /boot partition and apply changes there as the boot partition is _not_ encrypted.

Instead of running Anti Evil Maif (AEM) which has some restrictions according to the docs, I thought about a simple approach and would like to hear your opinion about it, to improve it.

How to protect /boot against attacks in a dual boot setup
---------------------------------------------------------

as far as I know, there is no way to protect boot as the data is unecrypted and can thereof be changed.
The only way would be to run GRUB with coreboot which could then be used to encrypt /boot (?)
But this seems to be complicated and will also not work with using Windows+Bitlocker in a dual boot setup.

If I can't protect boot I want at least that I can check if my boot partition has been tampered.

My approach is to fingerprint all files in boot and store those fingerprints in a file which is signed by me and stored in dom0 (and thereof on a LUKS-encrypted volume)

Thereof I have checksums which are a documentation how my /boot partition looked at a certain moment.
I can thereof run a checksum test on each boot and verify against the checksum file which has been created before.

In detail:

1) To create checksums for /boot

   # create a file with checksums of all files in the boot partition
   sudo find /boot -type f -exec md5sum {} \; | sort -k 2 > ~/boot.md5
   # gpg-sign the checksumfile with a detached signature
   gpg --output ~/boot.md5.sig --detach-sig ~/boot.md5

2) To verify checksums against the checksum file 

    # verify signature of checksumfile
    gpg --verify ~/boot.md5.sig
    # create a new file with checksums of all files in the boot partition
    sudo find /boot -type f -exec md5sum {} \; | sort -k 2 > ~/boot.md5.new
    # compare recent checksums with the saved version
    echo && echo compare generated checksums with checksums in checksum file
    diff ~/boot.md5 ~/boot.md5.new
    # remove temporary checksumfile
    sudo rm -Rf ~/boot.md5.new



See: check-boot.sh



What needs to be done next
---------------------------
Run script upon each boot and throw an error or at least status message if checksums doesn't match.
I'd like to see this happen before (!) I log into dom0 and that it happens at every boot without further user interaction.
The only thing the user needs to do is verify the signature of the checksum file which includes unlocking his GPG key by entering a passphrase.



Regards

[799]

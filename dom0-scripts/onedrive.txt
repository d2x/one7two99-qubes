Purpose
=======
Use an AppVM as a storage Hub, with the possibility to encrypt data and synchronize it to cloud services.
Data synchronization, data storage and data access/manipulation is split into three different domains.

See also the discussion in the Qubes Mailinglist
https://groups.google.com/forum/#!topic/qubes-users/UsK3RwhUBfQ
(!) the discussion started with the idea to use NFS to share data between VMs, as I didn√Ñt heard of sshfs before.

General idea and solution
=========================

- my-onedrive
  - connects to OneDrive
  - can access Storage App-VM via SSHFS
  - transfer encfs encrypted files
  
- my-storage
  - store all data on a big private.img partition
  - SSHFS target
  - stores encfs encrypeted files

- my-access
  - connects to Storage App-VM via SSHFS
  - mounts SSHFS
  - decrypt encfs data


```
StorageTemplateVM=t-fedora-28-storage
# In dom0: Clone fedora 28 Template to a new template 't-storage'
qvm-clone fedora-28-minimal $StorageTemplateVM
# Enable networking
qvm-prefs --set $StorageTemplateVM netvm sys-firewall
 
# Launch image, install updated and enable networking for the template.
qvm-run --auto --user root $StorageTemplateVM "xterm -hold -e '\
dnf -y update && \
dnf -y install qubes-core-agent-networking && \
shutdown -h now'"
 
# Install general packages
qvm-run --auto --user root $StorageTemplateVM "xterm -hold -e 'clear && \
  dnf -y install sshfs encfs openssh-server nano gnome-terminal passwd'"

# Install OneDrive
qvm-run --auto --user root $StorageTemplateVM "xterm -hold -e 'clear && \
  dnf -y install git libcurl-devel sqlite-devel xz make automake gcc gcc-c++ kernel-devel && \
  curl -fsS https://dlang.org/install.sh | bash -s dmd && \
  source ~/dlang/dmd-*/activate && \
  git clone https://github.com/skilion/onedrive.git && \
  cd onedrive && make && sudo make install && \
  shutdown -h now'"


# Packages for CryFS
# https://github.com/cryfs/cryfs/blob/develop/README.md
qvm-run --auto --user root $StorageTemplateVM "xterm -hold -e 'clear && \
  dnf -y install git gcc-c++ cmake make libcurl-devel boost-devel boost-static openssl-devel fuse-devel python && \
  git clone https://github.com/cryfs/cryfs.git cryfs && \
  cd cryfs && \
  mkdir cmake && cd cmake && cmake .. && make && sudo make install && \
  shutdown -h now'"


# Create new App VMs in dom0
qvm-create --template $StorageTemplateVM --label gray my-storage-access
qvm-create --template $StorageTemplateVM --label gray my-storage-datastore
qvm-create --template $StorageTemplateVM --label gray my-storage-onedrive
 
# Launch all VMs
qvm-start my-storage-access my-storage-onedrive my-storage-datastore


# Write down IP-adresses (see Setting of AppVMs)
qvm-ls --network | grep my-storage | gawk -v OFS='=' '{ print $1,$4 }'
# my-storage-access = 10.137.0.24/32
# my-storage-datastore = 10.137.0.27/32
# my-storage.onedrive = 10.137.0.28/32
```

Firewall-App-Rules
==================
my-firwwall.sh
--------------
This script will allow ssh-traffic between:
1) Access-VM and the Storage-VM, and
2) OneDrive-Sync-VM and the Storage-VM

Launch a Terminal in firewall VM: `qvm-run --auto sys-firewall xterm`
 
Setup rules sys-firewall: `vi sys-firewall-fw.sh` 
 
```
#!/bin/bash
# sys-firewall-fw.sh
# in dom0:
# qvm-ls --network | grep my-storage | gawk -v OFS='=' '{ print $1,$4 }'
myaccess=10.137.0.25
mydatastore=10.137.0.26
myonedrive=10.137.0.27
iptables -I FORWARD 2 -p tcp -s $myaccess -d $mydatastore --dport ssh -j ACCEPT
iptables -I FORWARD 3 -p tcp -s $myonedrive -d $mydatastore --dport ssh -j ACCEPT
iptables -L --line-numbers -v -n
```

Make Script executable: `chmod +x sys-firewall-fw.sh`


Storage-AppVM
=============

my-storage.sh
-------------
This VM will store the data
```
#!/bin/bash
# This script will setup the minimal rules to allow traffic between Storage and Access VM
# Data transfer is done per SSHFS (SSH Filesystem) = Port 22/TCP
 
sshserver=10.137.0.26                   # sshserver = this VM (my-storage-datastore)
sshclient=10.137.0.25                   # sshclient =  my-storage-access
sshsyncclient=10.137.0.27                 # shhsyncclient = ,ystorage-onedrive
sshfs_share=/home/user/my-share         # path to data on sshserver
  
case "$1" in
    'enable')
        # Flush iptables / delete all chains
        $0 flush
        echo "*** Enable SSH-Service"
        # Enable ssh access
        sudo systemctl start sshd.service
        echo "*** Set new rules for ssh access"
        # allow outgoing connection from sshserver via port 22/TCP
        sudo iptables -I INPUT 1 -p tcp -s $sshclient -d $sshserver --dport ssh -m state --state NEW,ESTABLISHED -j ACCEPT
        sudo iptables -I INPUT 1 -p tcp -s $sshsyncclient -d $sshserver --dport ssh -m state --state NEW,ESTABLISHED -j ACCEPT
        # allow incoming connections from sshserver to sshclient
        sudo iptables -I OUTPUT 1 -p tcp -s $sshserver -d $sshclient -m state --state ESTABLISHED -j ACCEPT
        sudo iptables -I OUTPUT 1 -p tcp -s $sshserver -d $sshsyncclient -m state --state ESTABLISHED -j ACCEPT
        ;;
    'disable')
    echo "*** Disable SSH-Service"
        # Disable ssh access
        sudo systemctl stop sshd.service
        # Flush iptables / delete all chains
        $0 flush
        ;;
    'fw')
        # Show Firewall configuration
        sudo iptables -L --line-numbers -n
        ;;
    'flush')
        # Flush iptables / delete all rules
        echo "*** Apply DROP policy to all chains"
        sudo iptables --flush
        sudo iptables --policy INPUT DROP
        sudo iptables --policy OUTPUT DROP
        sudo iptables --policy FORWARD DROP
        ;;
     'www')
        # sudo iptables --flush
        echo "*** Set new rules for internet access (http,https,dns)"
        sudo iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
        sudo iptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
        sudo iptables -A OUTPUT -p udp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
        sudo iptables -A INPUT  -p udp --sport 53 -m state --state ESTABLISHED     -j ACCEPT
        #sudo iptables -A OUTPUT -p tcp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
        #sudo iptables -A INPUT  -p tcp --sport 53 -m state --state ESTABLISHED      -j ACCEPT
        sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        ;;
     'install')
        # Enable & Start SSH in AppVM
        #sudo systemctl start sshd.service
        sudo systemctl enable sshd.service
        # set a SSH password for user user
        echo "*** Set new password for user"
        sudo passwd user
        ;;
    *)
          echo $"Usage: $0 {enable|disable|flush|www|fw|install}"
        exit 1
esac
```


Access-VM
=========
This VM will mount the datastore via sshfs and is able to decrypt the encfs data-share.

my-access.sh
------------
```
#!/bin/bash
# This script will setup the minimal rules to allow traffic between Storage and Access VM
# Data transfer is done per SSHFS (SSH Filesystem) = Port 22/TCP

# Variables
sshserver=10.137.0.26                        # sshserver
sshuser=user                                 # sshserver username
sshclient=10.137.0.25                        # sshclient = this vm
sshfs_share=/home/user/my-share              # path to data on sshserver
sshfs_mountdir=/home/user/my-storage         # local mount point
encfs_share=/home/user/my-storage/ENCFS      # folder with encfs-data
encfs_mountdir=/home/user/ENCFS_plain        # where to mount plain-text
 
case "$1" in
    'ssh')
        # Allow SSH through firewall
        # Flush iptables / delete all chains
        $0 flush
        echo "*** Set new rules for ssh access"
        # allow outgoing connection from sshserver via port 22/TCP
        sudo iptables -I OUTPUT 1 -p tcp -s $sshclient -d $sshserver --dport ssh -m state --state NEW,ESTABLISHED -j ACCEPT
        # allow incoming connections from sshserver to sshclient
        sudo iptables -I INPUT 1 -p tcp -s $sshserver -d $sshclient -m state --state ESTABLISHED -j ACCEPT
     ;;
    'mount')
        # Mount remote datastore via sshfs
        $0 flush
        echo "*** Mount SSHFS target"
        sshfs $sshuser@$sshserver:$sshfs_share $sshfs_mountdir
        # decrypt and mount ENCFS datastore 
        encfs $encfs_share $encfs_mountdir
        ;;
    'unmount')
        # Unmount ENCFS- and sshfs datastore 
        echo "*** Unmount"
        echo "Unmount " $sshfs_mountdir
        fusermount -u $encfs_mountdir
        fusermount -u $sshfs_mountdir
        $0 flush
        ;;
    'fw')
        # Show Firewall configuration
        sudo iptables -L --line-numbers -n
        ;;
    'flush')
        # Flush iptables / delete all rules
        echo "*** Apply DROP policy to all chains"
        sudo iptables --flush
        sudo iptables --policy INPUT DROP
        sudo iptables --policy OUTPUT DROP
        sudo iptables --policy FORWARD DROP
        ;;
     'www')
        # Allow internet access (only)
        $0 flush
        echo "*** Set new rules for internet access (http,https,dns)"
        sudo iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
        sudo iptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
        sudo iptables -A OUTPUT -p udp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
        sudo iptables -A INPUT  -p udp --sport 53 -m state --state ESTABLISHED     -j ACCEPT
        #sudo iptables -A OUTPUT -p tcp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
        #sudo iptables -A INPUT  -p tcp --sport 53 -m state --state ESTABLISHED      -j ACCEPT
        sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        ;;
     'install')
        # Setup directories and ssh without login
        # Enable SSH 
        $0 ssh
        # Create directories
        mkdir -p $sshfs_mountdir $encfs_mountdir
        # Check and create SSH keys if needed 
        if  [ ! -f ~/.ssh/id_rsa ]; then
           echo "Creating SSH Keys and setup certificate based logins"
           ssh-keygen -t rsa
           ssh-copy-id $sshuser@$sshserver

        fi
        $0 flush
        ;;
live.com/    *)
        # Show Syntac if no command arguments have been given
        echo
        echo "Usage: $0 {mount | unmount | flush | www | fw | install}"
        echo
        echo "   mount   : mount remote share and decrypt ENCFS datastore"
        echo "   unmount : unmount shares"
        echo "   flush   : flush firewall / remove all rules"
        echo "   www     : allow internet access through firewall"
        echo "   fw      : show firewall current ruleset"
        echo "   install : setup directories and ssh access without prompt" 
        echo
        exit 1
esac
```

OneDrive AppVM
==============

my-onedrive.sh
--------------

```
#!/bin/bash
# This script will setup the minimal rules to allow traffic between OneDrive Sync and Storage AppVM
# Data transfer is done per SSHFS (SSH Filesystem) = Port 22/TCP

sshserver=10.137.0.30                   # sshserver my-storage-datastor
sshuser=user                           # sshserver username
sshclient=10.137.0.17                  # sshclient = this vm = my-storage-onedrive
sshfs_share=/home/user/my-share        # path to data on sshserver
sshfs_mountdir=/home/user/my-onedrive   # local mount point
 
case "$1" in
    'enable')
        # Flush iptables / delete all chains
        $0 flush
        echo "*** Set new rules for ssh access"
        # allow outgoing connection from sshserver via port 22/TCP
        sudo iptables -I OUTPUT 1 -p tcp -s $sshclient -d $sshserver --dport ssh -m state --state NEW,ESTABLISHED -j ACCEPT
        # allow incoming connections from sshserver to sshclient
        sudo iptables -I INPUT 1 -p tcp -s $sshserver -d $sshclient -m state --state ESTABLISHED -j ACCEPT
     ;;
    'mount')
        # Enable ssh access
        $0 enable
        # mount share
        echo "*** Mount SSHFS target"
        sshfs $sshuser@$sshserver:$sshfs_share $sshfs_mountdir
        ;;
    'unmount')
        # Unmount sshfs datastore 
        echo "*** Unmount " $sshfs_mountdir
        fusermount -u $sshfs_mountdir
        $0 flush
        ;;
    'quicksync')
        $0 www
        # Start Single OneDrive-Sync
        onedrive --verbose
	$0 enable
        ;;
    'sync')
        # Start Continious OneDrive-Syncenable | mount | unmount | quicksync | sync | fw | flush | www | install
        onedrive --verbose --resync --monitor
        ;;
    'fw')
        # Show Firewall configuration
        sudo iptables -L --line-numbers -n
        ;;
    'flush')
        # Flush iptables / delete all rules
        echo "*** Apply DROP policy to all chains"
        sudo iptables --flush
        sudo iptables --policy INPUT DROP
        sudo iptables --policy OUTPUT DROP
        sudo iptables --policy FORWARD DROP
        ;;
     'www')
        # sudo iptables --flush
        echo "*** Set new rules for internet access (http,https,dns)"
        sudo iptables -A OUTPUT -p tcp -m tcp --dport 80 -j ACCEPT
        sudo iptables -A OUTPUT -p tcp -m tcp --dport 443 -j ACCEPT
        sudo iptables -A OUTPUT -p udp --dport 53 -m state --state NEW,ESTABLISHED -j ACCEPT
        sudo iptables -A INPUT  -p udp --sport 53 -m state --state ESTABLISHED     -j ACCEPT
        sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        ;;
     'install')
        $0 enable
        # Create directories
        mkdir -p $sshfs_mountdir
        # Check and create SSH keys if needed 
        if  [ ! -f ~/.ssh/id_rsa ]; then
           echo "Creating SSH Keys and setup certificate based logins"
           ssh-keygen -t rsa
           ssh-copy-id $sshuser@$sshserver
        fi
        if  [ ! -f ~/.config/onedrive/config ]; then
           # Create OneDrive config-files
           mkdir -p ~/.config/onedrive
           # ~/.config/onedrive/config - OneDrive Configuration file
           echo "# Directory where the files will be synced" > ~/.config/onedrive/config 
           echo sync_dir="\""$sshfs_mountdir""\" >> ~/.config/onedrive/config
           echo "# Skip files and directories that match this pattern" >> ~/.config/onedrive/config
           echo skip_file='"~*"' >> ~/.config/onedrive/config
        fi  
        if  [ ! -f ~/.config/onedrive/sync_list ]; then
           # ~/.config/onedrive/sync_list - Files which should be included in sync
           echo "# Folder which should be included in onedrive sync" > ~/.config/onedrive/sync_list
           echo Dokumente >> ~/.config/onedrive/sync_list
        fi
        $0 flush
        ;;
    *)
        echo
        echo $"Usage: $0 {enable | mount | unmount | quicksync | sync | fw | flush | www | install}"
        echo
        echo "   enable    : enable SSH through firewall"
        echo "   mount     : mount remote share" 
        echo "   unmount   : unmount shares"
        echo "   quicksync : start single onedrive sync"
        echo "   sync      : perfdorm full onedrive re-sync and keep syncing (monitor mmode)"        
        echo "   flush     : flush firewall / remove all rules"
        echo "   www       : allow internet access through firewall"
        echo "   fw        : show firewall current ruleset"
        echo "   install   : setup directories and ssh access without prompt" 
        echo
        exit 1
esac
```

